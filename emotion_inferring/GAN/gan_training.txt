
        try:
            if GAN_USAGE:
                G_steps   = 5000
                D_steps   = 100
                ARL_steps = 100

                if args.restore_from is None:
                    print("Pre-training for Generator... ")
                    for step in range(G_steps):
                        start_time = time.time()
                        loss_value, acc_value, _= sess.run([tower_loss_all, tower_acc_all, train_op])
                        duration = time.time() - start_time
                        print('Generator training step {:d} - loss = {:.3f} acc = {:.3f}, ({:.3f} sec/step)'
                              .format(step, loss_value, acc_value, duration))
                    save(saver, sess, logdir, step)

                print("Pre-training for Discriminator... ")
                for step in range(D_steps):
                    start_time = time.time()
                    D_loss, D_acc, _ = sess.run([D_loss_op, D_acc_op, D_train_op])
                    duration = time.time() - start_time
                    print('Discriminator training step {:d} - loss = {:.3f} acc = {:.3f}, ({:.3f} sec/step)'
                          .format(step, D_loss, D_acc, duration))
                print("Saving initializing result")
                save(saver, sess, logdir, step)

                print("Processing Adversarial Training ... ")
                for step in range(ARL_steps):
                    start_time = time.time()
                    G_loss, G_acc, _ = sess.run([G_loss_op, G_acc_op, G_train_op])
                    print('G training({:.3f} sec/step)'.format(time.time()-start_time))
                    D_start_time = time.time()
                    D_loss, D_acc, _ = sess.run([D_loss_op, D_acc_op,D_train_op])
                    print('D training({:.3f} sec/step)'.format(time.time() - D_start_time))
                    duration = time.time() - start_time
                    print('step {:d} - D_loss = {:.3f} D_acc = {:.3f} G_loss = {:.3f} G_acc = {:.3f} ({:.3f} sec/step)'
                          .format(step+1, D_loss, D_acc, G_loss, G_acc, duration))

        except:
            print("Some wrong happens in GAN based pre-training setup")
			
			
                    if overfitting_control > 10 and GAN_USAGE:
                        print("Processing Adversarial Training ... ")
                        for step in range(50):
                            start_time = time.time()
                            G_loss, G_acc, _ = sess.run([G_loss_op, G_acc_op, G_train_op])
                            print('G training({:.3f} sec/step)'.format(time.time() - start_time))
                            D_start_time = time.time()
                            D_loss, D_acc, _ = sess.run([D_loss_op, D_acc_op, D_train_op])
                            print('D training({:.3f} sec/step)'.format(time.time() - D_start_time))
                            duration = time.time() - start_time
                            print(
                                'step {:d} - D_loss = {:.3f} D_acc = {:.3f} G_loss = {:.3f} G_acc = {:.3f} ({:.3f} sec/step)'
                                .format(step, D_loss, D_acc, G_loss, G_acc, duration))
                        overfitting_control = 0